#ifndef __HOST_VIDEO_VIDEO_NTSC_H__
#define __HOST_VIDEO_VIDEO_NTSC_H__
#include "../video.h"

#include "esp_attr.h"
#include "esp_intr_alloc.h"

#include "rom/lldesc.h"

#define IRE(_x)          ((uint32_t)(((_x)+40)*255/3.3/147.5) << 8)   // 3.3V DAC

class VideoNTSC_t : public Video_t
{
  public:
    VideoNTSC_t();
    virtual bool init() override;
    virtual uint32_t getModesCount() override;
    virtual VideoModeDesc_t const * getModeDesc(uint32_t mode) override;

    virtual uint32_t getWidth() override;
    virtual uint32_t getHeight() override;
    virtual PixelFormat_t getPixelFormat() override;
    
    virtual void setVideoMode(uint32_t mode) override;
    virtual void * getScanline(uint32_t line) override;
  private:
    static constexpr DRAM_ATTR uint32_t atari_4_phase_ntsc[256] = {

        0x18181818,0x1A1A1A1A,0x1C1C1C1C,0x1F1F1F1F,0x21212121,0x24242424,0x27272727,0x2A2A2A2A,0x2D2D2D2D,0x30303030,0x34343434,0x38383838,0x3B3B3B3B,0x40404040,0x44444444,0x49494949,
        0x1A15210E,0x1C182410,0x1E1A2612,0x211D2915,0x231F2B18,0x26222E1A,0x2925311D,0x2C283420,0x2F2B3723,0x322E3A27,0x36323E2A,0x3A36412E,0x3D394532,0x423D4936,0x46424E3A,0x4B46523F,
        0x151A210E,0x171D2310,0x191F2613,0x1C222815,0x1E242B18,0x21272E1B,0x242A311D,0x272D3420,0x2A303724,0x2E333A27,0x31373D2A,0x353A412E,0x393E4532,0x3D424936,0x41474D3A,0x464B523F,
        0x101F1F10,0x13212113,0x15232315,0x18262618,0x1A28281A,0x1D2B2B1D,0x202E2E20,0x23313123,0x26343426,0x29383729,0x2D3B3B2D,0x303F3F31,0x34434234,0x38474738,0x3D4B4B3D,0x41505041,
        0x0E211A15,0x10231D17,0x13261F19,0x1528221C,0x182B241F,0x1B2E2721,0x1D312A24,0x20342D27,0x2337302A,0x273A332E,0x2A3E3731,0x2E413A35,0x32453E39,0x3649423D,0x3A4D4741,0x3F524B46,
        0x0E21151A,0x1024181C,0x12261A1E,0x15291D21,0x182B1F24,0x1A2E2226,0x1D312529,0x2034282C,0x23372B2F,0x273A2E33,0x2A3E3236,0x2E41353A,0x3245393E,0x36493D42,0x3A4E4246,0x3F52464B,
        0x101F111E,0x12211320,0x15241623,0x17261825,0x1A291B28,0x1D2C1E2B,0x202F202E,0x23322331,0x26352634,0x29382A37,0x2C3B2D3B,0x303F313E,0x34433542,0x38473946,0x3C4B3D4A,0x4150424F,
        0x141B0E21,0x161D1023,0x19201326,0x1B221528,0x1E25182B,0x21281B2E,0x242A1E30,0x272E2133,0x2A312436,0x2D34273A,0x30372B3D,0x343B2E41,0x383F3245,0x3C433649,0x40473A4D,0x454C3F52,
        0x19160E21,0x1B181024,0x1E1B1226,0x201D1529,0x2320172B,0x26231A2E,0x29261D31,0x2C292034,0x2F2C2337,0x322F273A,0x35322A3E,0x39362E41,0x3D3A3245,0x413E3649,0x45423A4E,0x4A473F52,
        0x1E11101F,0x20141222,0x22161424,0x25191727,0x271B1929,0x2A1E1C2C,0x2D211F2F,0x30242232,0x33272535,0x362A2838,0x3A2E2C3C,0x3E323040,0x41353343,0x46393847,0x4A3E3C4C,0x4F424150,
        0x210E131C,0x2311161E,0x25131820,0x28161B23,0x2A181D26,0x2D1B2028,0x301E232B,0x3321262E,0x36242931,0x3A272C35,0x3D2B3038,0x412E333C,0x45323740,0x49363B44,0x4D3B4048,0x523F444D,
        0x210E1817,0x24101B19,0x26121D1B,0x29151F1E,0x2B172221,0x2E1A2523,0x311D2826,0x34202B29,0x37232E2C,0x3A263130,0x3E2A3533,0x422E3837,0x45313C3B,0x4936403F,0x4E3A4543,0x523F4948,
        0x200F1D12,0x22111F14,0x25142217,0x27162419,0x2A19271C,0x2D1C2A1F,0x2F1F2C22,0x32222F25,0x35253328,0x3928362B,0x3C2C392F,0x402F3D32,0x44334136,0x4837453A,0x4C3B493E,0x51404E43,
        0x1C13200F,0x1F152311,0x21172513,0x241A2816,0x261D2A19,0x291F2D1B,0x2C22301E,0x2F253321,0x32283624,0x352C3928,0x392F3D2B,0x3C33402F,0x40374433,0x443B4837,0x493F4D3B,0x4D445140,
        0x1818220E,0x1A1A2410,0x1C1C2612,0x1F1F2915,0x21212B17,0x24242E1A,0x2727311D,0x2A2A3420,0x2D2D3723,0x30303A26,0x34343E2A,0x3838422E,0x3B3B4531,0x40404A36,0x44444E3A,0x4949533F,
        0x131C200F,0x151F2311,0x17212513,0x1A242816,0x1D262A19,0x1F292D1B,0x222C301E,0x252F3321,0x28323624,0x2C353928,0x2F393D2B,0x333C402F,0x37404433,0x3B444837,0x3F494D3B,0x444D5140,
    };

    static constexpr DRAM_ATTR uint32_t atari_4_phase_ntsc_even[256] = {

        0x18180000,0x1A1A0000,0x1C1C0000,0x1F1F0000,0x21210000,0x24240000,0x27270000,0x2A2A0000,0x2D2D0000,0x30300000,0x34340000,0x38380000,0x3B3B0000,0x40400000,0x44440000,0x49490000,
        0x1A150000,0x1C180000,0x1E1A0000,0x211D0000,0x231F0000,0x26220000,0x29250000,0x2C280000,0x2F2B0000,0x322E0000,0x36320000,0x3A360000,0x3D390000,0x423D0000,0x46420000,0x4B460000,
        0x151A0000,0x171D0000,0x191F0000,0x1C220000,0x1E240000,0x21270000,0x242A0000,0x272D0000,0x2A300000,0x2E330000,0x31370000,0x353A0000,0x393E0000,0x3D420000,0x41470000,0x464B0000,
        0x101F0000,0x13210000,0x15230000,0x18260000,0x1A280000,0x1D2B0000,0x202E0000,0x23310000,0x26340000,0x29380000,0x2D3B0000,0x303F0000,0x34430000,0x38470000,0x3D4B0000,0x41500000,
        0x0E210000,0x10230000,0x13260000,0x15280000,0x182B0000,0x1B2E0000,0x1D310000,0x20340000,0x23370000,0x273A0000,0x2A3E0000,0x2E410000,0x32450000,0x36490000,0x3A4D0000,0x3F520000,
        0x0E210000,0x10240000,0x12260000,0x15290000,0x182B0000,0x1A2E0000,0x1D310000,0x20340000,0x23370000,0x273A0000,0x2A3E0000,0x2E410000,0x32450000,0x36490000,0x3A4E0000,0x3F520000,
        0x101F0000,0x12210000,0x15240000,0x17260000,0x1A290000,0x1D2C0000,0x202F0000,0x23320000,0x26350000,0x29380000,0x2C3B0000,0x303F0000,0x34430000,0x38470000,0x3C4B0000,0x41500000,
        0x141B0000,0x161D0000,0x19200000,0x1B220000,0x1E250000,0x21280000,0x242A0000,0x272E0000,0x2A310000,0x2D340000,0x30370000,0x343B0000,0x383F0000,0x3C430000,0x40470000,0x454C0000,
        0x19160000,0x1B180000,0x1E1B0000,0x201D0000,0x23200000,0x26230000,0x29260000,0x2C290000,0x2F2C0000,0x322F0000,0x35320000,0x39360000,0x3D3A0000,0x413E0000,0x45420000,0x4A470000,
        0x1E110000,0x20140000,0x22160000,0x25190000,0x271B0000,0x2A1E0000,0x2D210000,0x30240000,0x33270000,0x362A0000,0x3A2E0000,0x3E320000,0x41350000,0x46390000,0x4A3E0000,0x4F420000,
        0x210E0000,0x23110000,0x25130000,0x28160000,0x2A180000,0x2D1B0000,0x301E0000,0x33210000,0x36240000,0x3A270000,0x3D2B0000,0x412E0000,0x45320000,0x49360000,0x4D3B0000,0x523F0000,
        0x210E0000,0x24100000,0x26120000,0x29150000,0x2B170000,0x2E1A0000,0x311D0000,0x34200000,0x37230000,0x3A260000,0x3E2A0000,0x422E0000,0x45310000,0x49360000,0x4E3A0000,0x523F0000,
        0x200F0000,0x22110000,0x25140000,0x27160000,0x2A190000,0x2D1C0000,0x2F1F0000,0x32220000,0x35250000,0x39280000,0x3C2C0000,0x402F0000,0x44330000,0x48370000,0x4C3B0000,0x51400000,
        0x1C130000,0x1F150000,0x21170000,0x241A0000,0x261D0000,0x291F0000,0x2C220000,0x2F250000,0x32280000,0x352C0000,0x392F0000,0x3C330000,0x40370000,0x443B0000,0x493F0000,0x4D440000,
        0x18180000,0x1A1A0000,0x1C1C0000,0x1F1F0000,0x21210000,0x24240000,0x27270000,0x2A2A0000,0x2D2D0000,0x30300000,0x34340000,0x38380000,0x3B3B0000,0x40400000,0x44440000,0x49490000,
        0x131C0000,0x151F0000,0x17210000,0x1A240000,0x1D260000,0x1F290000,0x222C0000,0x252F0000,0x28320000,0x2C350000,0x2F390000,0x333C0000,0x37400000,0x3B440000,0x3F490000,0x444D0000,
    };

    static constexpr DRAM_ATTR uint16_t atari_4_phase_ntsc_odd[256] = {

        0x1818,0x1A1A,0x1C1C,0x1F1F,0x2121,0x2424,0x2727,0x2A2A,0x2D2D,0x3030,0x3434,0x3838,0x3B3B,0x4040,0x4444,0x4949,
        0x210E,0x2410,0x2612,0x2915,0x2B18,0x2E1A,0x311D,0x3420,0x3723,0x3A27,0x3E2A,0x412E,0x4532,0x4936,0x4E3A,0x523F,
        0x210E,0x2310,0x2613,0x2815,0x2B18,0x2E1B,0x311D,0x3420,0x3724,0x3A27,0x3D2A,0x412E,0x4532,0x4936,0x4D3A,0x523F,
        0x1F10,0x2113,0x2315,0x2618,0x281A,0x2B1D,0x2E20,0x3123,0x3426,0x3729,0x3B2D,0x3F31,0x4234,0x4738,0x4B3D,0x5041,
        0x1A15,0x1D17,0x1F19,0x221C,0x241F,0x2721,0x2A24,0x2D27,0x302A,0x332E,0x3731,0x3A35,0x3E39,0x423D,0x4741,0x4B46,
        0x151A,0x181C,0x1A1E,0x1D21,0x1F24,0x2226,0x2529,0x282C,0x2B2F,0x2E33,0x3236,0x353A,0x393E,0x3D42,0x4246,0x464B,
        0x111E,0x1320,0x1623,0x1825,0x1B28,0x1E2B,0x202E,0x2331,0x2634,0x2A37,0x2D3B,0x313E,0x3542,0x3946,0x3D4A,0x424F,
        0x0E21,0x1023,0x1326,0x1528,0x182B,0x1B2E,0x1E30,0x2133,0x2436,0x273A,0x2B3D,0x2E41,0x3245,0x3649,0x3A4D,0x3F52,
        0x0E21,0x1024,0x1226,0x1529,0x172B,0x1A2E,0x1D31,0x2034,0x2337,0x273A,0x2A3E,0x2E41,0x3245,0x3649,0x3A4E,0x3F52,
        0x101F,0x1222,0x1424,0x1727,0x1929,0x1C2C,0x1F2F,0x2232,0x2535,0x2838,0x2C3C,0x3040,0x3343,0x3847,0x3C4C,0x4150,
        0x131C,0x161E,0x1820,0x1B23,0x1D26,0x2028,0x232B,0x262E,0x2931,0x2C35,0x3038,0x333C,0x3740,0x3B44,0x4048,0x444D,
        0x1817,0x1B19,0x1D1B,0x1F1E,0x2221,0x2523,0x2826,0x2B29,0x2E2C,0x3130,0x3533,0x3837,0x3C3B,0x403F,0x4543,0x4948,
        0x1D12,0x1F14,0x2217,0x2419,0x271C,0x2A1F,0x2C22,0x2F25,0x3328,0x362B,0x392F,0x3D32,0x4136,0x453A,0x493E,0x4E43,
        0x200F,0x2311,0x2513,0x2816,0x2A19,0x2D1B,0x301E,0x3321,0x3624,0x3928,0x3D2B,0x402F,0x4433,0x4837,0x4D3B,0x5140,
        0x220E,0x2410,0x2612,0x2915,0x2B17,0x2E1A,0x311D,0x3420,0x3723,0x3A26,0x3E2A,0x422E,0x4531,0x4A36,0x4E3A,0x533F,
        0x200F,0x2311,0x2513,0x2816,0x2A19,0x2D1B,0x301E,0x3321,0x3624,0x3928,0x3D2B,0x402F,0x4433,0x4837,0x4D3B,0x5140,
    };

    static const uint32_t NATIVE_WIDTH                    = 336;
    static const uint32_t NATIVE_HEIGHT                   = 240;
    static const uint32_t NTSC_COLOR_CLOCKS_PER_SCANLINE  = 228;       // really 227.5 for NTSC but want to avoid half phase fiddling for now
    static const uint32_t NTSC_LINES                      = 262;

    static const uint32_t SYNC_LEVEL                      = IRE(-40);
    static const uint32_t BLANKING_LEVEL                  = IRE(0);
    static const uint32_t BLACK_LEVEL                     = IRE(7.5);
    static const uint32_t GRAY_LEVEL                      = IRE(50);
    static const uint32_t WHITE_LEVEL                     = IRE(100);

    static constexpr uint16_t NTSC_BURST_4[12] = {
      BLANKING_LEVEL + BLANKING_LEVEL / 2, BLANKING_LEVEL, BLANKING_LEVEL - BLANKING_LEVEL / 2, BLANKING_LEVEL,
      BLANKING_LEVEL + BLANKING_LEVEL / 2, BLANKING_LEVEL, BLANKING_LEVEL - BLANKING_LEVEL / 2, BLANKING_LEVEL,
      BLANKING_LEVEL + BLANKING_LEVEL / 2, BLANKING_LEVEL, BLANKING_LEVEL - BLANKING_LEVEL / 2, BLANKING_LEVEL,
    };

    static const uint32_t _samples_per_cc = 4; // 3 or 4
    static constexpr uint32_t _line_width = NTSC_COLOR_CLOCKS_PER_SCANLINE*_samples_per_cc;
    static constexpr float _sample_rate = 315.0/88 * _samples_per_cc;   // DAC rate
    static const uint32_t _hsync = (((uint32_t)(4.7F*_sample_rate) + _samples_per_cc)/(_samples_per_cc << 1))*(_samples_per_cc << 1);
    static const uint32_t _hsync_long = (((uint32_t)((63.555-4.7)*_sample_rate) + _samples_per_cc)/(_samples_per_cc << 1))*(_samples_per_cc << 1);
    static const uint32_t _active_start = (((uint32_t)((_samples_per_cc == 4 ? 10 : 10.5)*_sample_rate) + _samples_per_cc)/(_samples_per_cc << 1))*(_samples_per_cc << 1);

    static const uint32_t NUMBER_OF_MODES = 2;
    static constexpr VideoModeDesc_t modes[NUMBER_OF_MODES] = {
      {.width = 336, .height = 240, .pixelFormat = PIXEL_FORMAT_I8, .frameRate = 60, .flags = 0},
      {.width = 336, .height = 240, .pixelFormat = PIXEL_FORMAT_I8, .frameRate = 60, .flags = 0}
    };

    volatile int _line_counter = 0;
    volatile int _frame_counter = 0;
    uint32_t _phase;

    uint32_t mode;
    uint8_t **framebuffer;
    bool colorburstEnabled;
    lldesc_t _dma_desc[4] = {0};
    intr_handle_t _isr_handle;

    void (VideoNTSC_t::*_blitter)(uint8_t *src, uint16_t *dst);

    void IRAM_ATTR video_isr(volatile void* vbuf);

    void __attribute__((optimize("-Ofast"))) IRAM_ATTR sync(uint16_t *line, int syncwidth);
    void __attribute__((optimize("-Ofast"))) IRAM_ATTR burst(uint16_t* line);
    void __attribute__((optimize("-Ofast"))) IRAM_ATTR blank(uint16_t *line, int syncwidth);
    void __attribute__((optimize("-Ofast"))) IRAM_ATTR blitter_0(uint8_t *src, uint16_t *dst);
    void __attribute__((optimize("-Ofast"))) IRAM_ATTR blitter_1(uint8_t *src, uint16_t *dst);
    friend void IRAM_ATTR i2s_intr_handler_video(void *arg);
};

#endif /* __HOST_VIDEO_VIDEO_NTSC_H__ */